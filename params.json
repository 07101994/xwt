{"name":"Xwt","tagline":"","body":"This document is an introduction to XWT, a cross-platform UI toolkit\r\nfor creating desktop applications.\r\n\r\nIf you have any question about XWT or do you want to contribute\r\na discussion group for XWT is available here:\r\n\r\nhttp://groups.google.com/group/xwt-list\r\n\r\nIntroduction\r\n============\r\n\r\nXwt is a new .NET framework for creating desktop applications that run\r\non multiple platforms from the same codebase.   Xwt works by exposing\r\none unified API across all environments that is mapped to a set of\r\nnative controls on each platform.\r\n\r\nThis means that Xwt tends to focus on providing controls that will\r\nwork across all platforms. However, that doesn't mean that the\r\nfunctionality available is a common denominator of all platforms.\r\nIf a specific feature or widget is not available in the\r\nnative framework of a platform, it will be emulated or implemented\r\nas a set of native widgets.\r\n\r\nXwt can be used as a standalone framework to power the entire application\r\nor it can be embedded into an existing host.  This allows developers\r\nto develop their \"shell\" using native components (for example a Ribbon\r\non Windows, toolbars on Linux) and use Xwt for specific bits of the\r\napplication, like dialog boxes or cross platform surfaces. \r\n\r\nXwt works by creating an engine at runtime that will map to the\r\nunderlying platform.   These are the engines that are supported on\r\neach platform:\r\n\r\n* Windows: WPF engine, Gtk engine (using Gtk#)\r\n* MacOS X: Cocoa engine (using MonoMac) and Gtk engine (using Gtk#)\r\n* Linux: Gtk engine (using Gtk#)\r\n\r\nThis means for example that you can write code for Xwt on Windows that\r\ncan be hosted on an existing WPF application (like Visual Studio) or\r\nan existing Gtk# application (like MonoDevelop).   Or on Mac, you can\r\nhost Xwt on an existing Cocoa/MonoMac application or you can host it\r\nin our own MonoDevelop IDE.\r\n\r\nGetting Started\r\n---------------\r\n\r\nOpen the Xwt.sln with MonoDevelop (or VisualStudio on Windows) and\r\nbuild the solution.   You should end up with the libraries that you\r\ncan use in your project and a couple of sample applications.\r\n\r\nUsing Xwt in your app\r\n---------------------\r\n\r\nBased on your platform and the backend that you want to use, you need\r\nto pick the libraries that you want to use in your project.\r\n\r\n* Windows+WPF: Xwt.dll + Xwt.WPF.dll (requires WPF)\r\n* Windows+Gtk: Xwt.dll + Xwt.Gtk.dll (requires Gtk#)\r\n* Linux+Gtk: Xwt.dll + Xwt.Gtk.dll (requires Gtk#)\r\n* Mac+Gtk: Xwt.dll + Xwt.Gtk.dll (requires Gtk#)\r\n* Mac+Cocoa: Xwt.dll + Xwt.Mac.dll (requires MonoMac.dll)\r\n\r\nHello World\r\n-----------\r\n\r\nTo write your first application, create an empty .NET project in your\r\nfavorite language in MonoDevelop or Visual Studio and reference the\r\nXwt.dll library. This is the only library that you need to reference\r\nat compile time.\r\n\r\nThis is the simplest Xwt program you can write:\r\n\r\n\tusing System;\r\n\tusing Xwt;\r\n\t\r\n\tclass XwtDemo {\r\n\t\t[STAThread]\r\n\t\tstatic void Main ()\r\n\t\t{\r\n\t\t\tApplication.Initialize (ToolkitType.Gtk);\r\n\t\t\tvar mainWindow = new Window (){\r\n\t\t\t\tTitle = \"Xwt Demo Application\",\r\n\t\t\t\tWidth = 500,\r\n\t\t\t\tHeight = 400\r\n\t\t\t};\r\n\t\t\tmainWindow.Show ();\r\n\t\t\tApplication.Run ();\r\n\t\t\tmainWindow.Dispose ();\r\n\t\t}\r\n\t}\r\n\r\nYou use the Application.Initialize() method to get the backend\r\ninitialized. In this example we are using the Gtk backend. If you\r\nwant to use another backend, just change the parameter provided\r\nto the Initialize() method. Also make sure the appropiate backend\r\nDLL is available in the application directory.\r\n\r\nThen we create an instance of the Window class, this class exposes two\r\ninteresting properties, MainMenu which can be used to set the Window's\r\nmain menu and \"Content\" which is of type \"Widget\" and allows you to\r\nadd some content to the window.\r\n\r\nFinally, the Application.Run method is called to get the UI events\r\nprocessing going.\r\n\r\nWidget Class Hierarchy\r\n======================\r\n\r\nYou will be using widgets to create the contents for your\r\napplication.   Xwt.Widget is the abstract base class from which all\r\nthe other components are created.  \r\n\r\nSome Widgets can contain other widgets, these are container widgets,\r\nand in Xwt those are Canvas, Paned, HBox, VBox and Table.  The first\r\ntwo implement a box layout system, while the last one implements a\r\nTable layout that allows widgets to be attached to different\r\nanchor-points in a grid.\r\n\r\nThe layout system uses an auto-sizing system similar to what is\r\navailble in Gtk and HTML allowing the user interface to grow or shrink\r\nbased on the contents of the childrens on it.\r\n\r\n* XwtComponent \r\n    * Menu\r\n    * MenuItem\r\n    * Widget\r\n        * Box (Container)\r\n            * HBox (Container)\r\n            * VBox (Container)\r\n        * Button\r\n            * MenuButton\r\n            * ToggleButton\r\n        * Canvas (Container)\r\n        * Checkbox\r\n        * ComboBox\r\n        * Frame\r\n        * ImageView\r\n        * Label\r\n        * ListView\r\n        * NoteBook\r\n        * Paned (Container)\r\n            * HPaned (Container)\r\n            * VPaned (Container)\r\n        * ProgressBar\r\n        * ScrollView\r\n        * Separator\r\n            * VSeparator\r\n            * HSeparator\r\n        * Table (Container)\r\n        * TextEntry\r\n        * TreeView\r\n    * WindowFrame\r\n        * Window\r\n            * Dialog\r\n\r\nFor example, the following attaches various labels and data entries to\r\na Table:\r\n\r\n\tt = new Table ();\r\n\tt.Attach (new Label (\"One:\"), 0, 1, 0, 1);\r\n\tt.Attach (new TextEntry (), 1, 2, 0, 1);\r\n\tt.Attach (new Label (\"Two:\"), 0, 1, 1, 2);\r\n\tt.Attach (new TextEntry (), 1, 2, 1, 2);\r\n\tt.Attach (new Label (\"Three:\"), 0, 1, 2, 3);\r\n\tt.Attach (new TextEntry (), 1, 2, 2, 3);\r\n\r\n\r\nThe Application Class\r\n=====================\r\n\r\nThe Application class is a static class that provides services to run\r\nyour application.  \r\n\r\nInitialization \r\n--------------\r\n\r\nThe Application.Initialize API will instruct Xwt to initialize its\r\nbinding to the native toolkit. You can pass an optional parameter to\r\nthis method that specifies the full type name to load as the backend.\r\n\r\nFor example, you can force the initialization of the backend to be\r\nspecifically Gtk+ or specifically MonoMac based on MacOS.   This is\r\ncurrently done like this:\r\n\r\n\tApplication.Initialize (\"Xwt.GtkBackend.GtkEngine, Xwt.Gtk, Version=1.0.0.0\");\r\n\r\nor:\r\n\r\n\tApplication.Initialize (\"Xwt.Mac.MacEngine, Xwt.Mac, Version=1.0.0.0\");\r\n\r\nAs you saw from the Hello World sample, toplevel windows are created\r\nby creating an instance of the \"Xwt.Window\" class.   This class\r\nexposes a couple of properties that you can use to spice it up.   The\r\nMainMenu property is used to control the contents of the application\r\nmenus while the \"Content\" property is used to hold a Widget.\r\n\r\nTimers\r\n------\r\n\r\nThe Application.TimeoutInvoke method takes a timespan and a Func<bool>\r\naction method and invokes that method in the main user interface\r\nloop.  \r\n\r\nIf the provided function returns true, then the timer is restarted,\r\notherwise the timer ends.\r\n\r\nBackground Threads\r\n------------------\r\n\r\nIt is very common to perform tasks in the background and for those\r\ntasks in the background to later update the user interface.   The Xwt\r\nAPI is not thread safe, which means that calls to the Xwt API must\r\nonly be done from the main user interface thread.\r\n\r\nThis is a trait from the underlying toolkits used by Xwt.\r\n\r\nIf you want a background thread to run some code on the main loop, you\r\nuse the Application.Invoke (Action action) method.   The provided\r\n\"action\" method is guaranteed to run on the main loop.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}